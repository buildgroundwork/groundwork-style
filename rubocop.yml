require:
  - ./lib/rubocop/cop/layout/space_before_comma_plus.rb
  - ./lib/rubocop/cop/layout/space_inside_parens_plus.rb

inherit_mode:
  merge:
    - Include
    - Exclude
    - IgnoredMethods

AllCops:
  Include:
    - '**/*.rb'

  DisplayCopNames: true
  TargetRubyVersion: 3.0

#===============
# Layout
#===============
# Prefer this:
# do_something(foo,
#   bar
# )
Layout/ArgumentAlignment:
  EnforcedStyle: with_fixed_indentation

Layout/BeginEndAlignment:
  Enabled: true
  EnforcedStyleAlignWith: begin

Layout/EmptyLinesAroundAttributeAccessor:
  Enabled: true

# Prefer this:
#
# Foo.new(wibble: [
#   something,
#   something_else
# ])
#
# to this:
#
# Foo.new(wibble: [
#                   something,
#                   something_else
#                 ])
Layout/FirstArrayElementIndentation:
  EnforcedStyle: consistent

# Prefer this:
#
# Foo.new(wibble: {
#   a: something,
#   b: something_else
# })
#
# to this:
#
# Foo.new(wibble: {
#                   a: something,
#                   b: something_else
#                 })
Layout/FirstHashElementIndentation:
  EnforcedStyle: consistent

Layout/HashAlignment:
  EnforcedLastArgumentHashStyle: ignore_implicit

Layout/LineEndStringConcatenationIndentation:
  Enabled: true
  EnforcedStyle: indented

# This is not 1986.
Layout/LineLength:
  Enabled: false

Layout/MultilineArrayBraceLayout:
  Enabled: true

Layout/MultilineAssignmentLayout:
  Enabled: true
  SupportedTypes:
    - case
    - class
    - if
    - kwbegin
    - module

Layout/MultilineHashBraceLayout:
  Enabled: true

Layout/MultilineMethodCallBraceLayout:
  Enabled: true

Layout/MultilineMethodDefinitionBraceLayout:
  Enabled: true

# This is the default VIM indentation.
Layout/MultilineMethodCallIndentation:
  EnforcedStyle: indented

# This is the default VIM indentation.
Layout/MultilineOperationIndentation:
  EnforcedStyle: indented

Layout/SpaceAroundMethodCallOperator:
  Enabled: true

# No need to provide for ASCII art in assignments (the default is to allow
# #= and #=> to have multiple spaces).
Layout/SpaceAroundOperators:
  AllowForAlignment: false

Layout/SpaceBeforeBrackets:
  Enabled: true

Layout/SpaceBeforeComma:
  Enabled: false

Layout/SpaceBeforeCommaPlus:
  EnforcedStyle: space_after_colon

Layout/SpaceInsideParens:
  Enabled: false

Layout/SpaceInsideParensPlus:
  EnforcedStyle: space_after_colon

Layout/TrailingEmptyLines:
  EnforcedStyle: final_blank_line

#===============
# Naming
#===============
Naming/BlockForwarding:
  Enabled: true

Naming/FileName:
  Exclude:
    - 'gems/**/*'

Naming/InclusiveLanguage:
  Enabled: true

# We want to have symbols that contain underscore-delimited digits
# (e.g. :some_table_deprecated_2020_11_16)
Naming/VariableNumber:
  CheckSymbols: false

#===============
# Style
#===============
Style/AccessorGrouping:
  Enabled: true

Style/ArgumentsForwarding:
  Enabled: true

# We allow the [*a] style array coercion.
Style/ArrayCoercion:
  Enabled: false

Style/AutoResourceCleanup:
  Enabled: true

Style/BisectedAttrAccessor:
  Enabled: true

# JSON matchers involve a lot of chaining, which looks much better with {...}
# as oppposed to do/end.
Style/BlockDelimiters:
  Exclude:
    - spec/views/**/*

Style/CaseLikeIf:
  Enabled: true

# We prefer the compact style, but issues with Rails const loading sometimes
# require using the nested style.
Style/ClassAndModuleChildren:
  Enabled: false
  EnforcedStyle: compact

Style/ClassEqualityComparison:
  Enabled: true

Style/ClassMethodsDefinitions:
  Enabled: true
  EnforcedStyle: self_class

Style/CollectionCompact:
  Enabled: true

Style/CollectionMethods:
  Enabled: true
  # ...ect
  PreferredMethods:
    map: 'collect'
    map!: 'collect!'
    reduce: 'inject'
    reduce!: 'inject!'
    find: 'detect'
    keep_if: 'select!'
    delete_if: 'reject!'

# This rule is marked "unsafe" because it may affect logic incorrectly.
# This check is best left to the judgement of human brains.
Style/CombinableLoops:
  Enabled: false

# Use backticks on single-line commands, and %x on multi-line commands.
Style/CommandLiteral:
  EnforcedStyle: mixed
  AllowInnerBackticks: false

# Let's be honest, if you're putting 'HACK' comments into your code then you
# need more than static style analysis.
Style/CommentAnnotation:
  Keywords:
    - TODO

Style/Documentation:
  Enabled: false

Style/DocumentDynamicEvalDefinition:
  Enabled: true

# Sometimes we have to coerce types to actual boolean types in JBuilder views,
# in order to get the right JSON type.
Style/DoubleNegation:
  Exclude:
    - '**/*.jbuilder'

# #each_with_object and #inject have different roles; apples to oranges.
Style/EachWithObject:
  Description: 'Prefer `each_with_object` over `inject` or `reduce`.'
  Enabled: false

Style/EndlessMethod:
  Enabled: true

Style/EnvHome:
  Enabled: true

# Sometimes using yield is more clear.
Style/ExplicitBlockArgument:
  Enabled: false

Style/ExponentialNotation:
  Enabled: true

# What does this rule tell us?  This rule enforces the use of #fetch when
# reading an environment variable, because ENV['FOO'] will return nil if the
# env var `FOO` is not set.  But, code has no control over whether env vars are
# set or not.  If the env var is required then the code must have an explicit
# check, with an appropriate error condition for the case when it's not set. If
# the env var is not required, then the code must have an explicit check, with
# no error condition necessary.  So, this simply changes this:
#
# ```
#   if (foo = ENV['FOO'])
#     ...
# ```
#
# to
#
# ```
#   if (foo = ENV.fetch('FOO', nil))
#     ...
# ```
#
# More verbose, but does the extra `nil` add anything?
Style/FetchEnvVar:
  Enabled: false

Style/FileRead:
  Enabled: true

Style/FileWrite:
  Enabled: true

# This cop crashes on JBuilder templates.
Style/FrozenStringLiteralComment:
  Exclude:
    - '**/*.jbuilder'

Style/GlobalStdStream:
  Enabled: true

# Guard clauses produce multiple exit points from a function.  Extracting a
# method makes for cleaner method bodies.
Style/GuardClause:
  Enabled: false

Style/HashAsLastArrayItem:
  Enabled: true

Style/HashConversion:
  Enabled: true

Style/HashEachMethods:
  Enabled: true

Style/HashExcept:
  Enabled: true

Style/HashLikeCase:
  Enabled: true

Style/HashTransformKeys:
  Enabled: true

Style/HashTransformValues:
  Enabled: true

# Sometimes nested conditionals are conceptually orthogonal.  Reducing the
# nesting may be logically correct, but not make the logic easier to follow
# or reason about.
Style/IfInsideElse:
  Enabled: false

Style/IfWithBooleanLiteralBranches:
  Enabled: true

Style/InPatternThen:
  Enabled: true

Style/KeywordParametersOrder:
  Enabled: true

# json.(... is idiomatic for JBuilder
Style/LambdaCall:
  Exclude:
    - '**/**.json.jbuilder'

Style/MapCompactWithConditionalBlock:
  Enabled: true

Style/MapToHash:
  Enabled: true

Style/MethodCalledOnDoEndBlock:
  StyleGuide: 'https://github.com/bbatsov/ruby-style-guide#single-line-blocks'
  Enabled: true

Style/MethodCallWithArgsParentheses:
  Enabled: true
  IgnoredMethods:
    - require
    - require_relative
    - raise

# Don't require else clauses for if statements; sometimes a nil return value is
# just what the doctor ordered.
Style/MissingElse:
  Enabled: true
  EnforcedStyle: case

# Both have their place.
Style/MixinGrouping:
  Enabled: false

# JSON matchers involve a lot of chaining
Style/MultilineBlockChain:
  Exclude:
    - spec/views/**/*

Style/MultilineInPatternThen:
  Enabled: true

# Starting a (multi-line) conditional with 'unless' is confusing.
Style/NegatedIf:
  Enabled: false

Style/NegatedIfElseCondition:
  Enabled: true

Style/NestedFileDirname:
  Enabled: true

# No one likes this style.
Style/Next:
  Enabled: false

Style/NilLambda:
  Enabled: true

# No explicit nil checks.
Style/NonNilCheck:
  IncludeSemanticChanges: true

Style/NumberedParameters:
  Enabled: true
  EnforcedStyle: disallow

Style/NumberedParametersLimit:
  Enabled: true

Style/ObjectThen:
  Enabled: true

Style/OpenStructUse:
  Enabled: true

Style/OptionalBooleanParameter:
  Enabled: true

Style/OptionHash:
  Enabled: true

Style/PercentLiteralDelimiters:
  PreferredDelimiters:
    default: '[]'

# This seems to apply entirely to the Hash#has_key? and Hash#has_value? methods.
# The debate on deprecating these methods seems anything but resolved, and the
# latest Ruby documentation doesn't mention them as deprecated.  Given that
# English speakers seem to consistently prefer them over the alternatives (#key?
# and #value?), we'll hold onto them for now.
Style/PreferredHashMethods:
  Enabled: false

Style/QuotedSymbols:
  Enabled: true

# We don't pass backtraces, so this should be fine.
Style/RaiseArgs:
  EnforcedStyle: compact

Style/RedundantArgument:
  Enabled: true

Style/RedundantAssignment:
  Enabled: true

Style/RedundantFileExtensionInRequire:
  Enabled: true

Style/RedundantFetchBlock:
  Enabled: true

Style/RedundantInitialize:
  Enabled: true

Style/RedundantRegexpCharacterClass:
  Enabled: true

Style/RedundantRegexpEscape:
  Enabled: true

Style/RedundantSelfAssignment:
  Enabled: true

Style/RedundantSelfAssignmentBranch:
  Enabled: true

# Use slashes on single-line regexes, and %r on multi-line regexes.
Style/RegexpLiteral:
  EnforcedStyle: mixed
  AllowInnerSlashes: false

Style/RescueStandardError:
  EnforcedStyle: implicit

Style/SelectByRegexp:
  Enabled: true

# e.g. subject { render; rendered }
Style/Semicolon:
  Exclude:
    - spec/**/*

Style/Send:
  StyleGuide: 'https://github.com/bbatsov/ruby-style-guide#prefer-public-send'
  Enabled: true

# Throwing an exception does not necessarily mean failure.
Style/SignalException:
  Description: 'Checks for proper usage of fail and raise.'
  StyleGuide: 'https://github.com/bbatsov/ruby-style-guide#fail-method'
  Enabled: false

Style/SingleArgumentDig:
  Enabled: true

# Specific, context-dependent method names can provide more clarity than
# general names.
Style/SingleLineBlockParams:
  Enabled: false

Style/SlicingWithRange:
  Enabled: true

# Sometimes a nested condition is conceptually distinct from the outer condition
# so combining them may be more concise but is conceptually incorrect.
Style/SoleNestedConditional:
  Enabled: false

Style/StringChars:
  Enabled: true

Style/StringConcatenation:
  Enabled: true

Style/StringLiterals:
  EnforcedStyle: double_quotes
  Exclude:
    # auto-generated
    - bin/**/*

Style/SwapValues:
  Enabled: true

# Ignore auto-generated files, and the like.
Style/SymbolArray:
  Exclude:
    - Gemfile
    - lib/tasks/*.rake

Style/TrivialAccessors:
  # Allows trivial writers that don't end in an equal sign. e.g.
  #
  # def on_exception(action)
  #   @on_exception=action
  # end
  # on_exception :restart
  #
  # Commonly used in DSLs
  AllowDSLWriters: true
  # Allow methods like this:
  #
  # def foo?
  #   @foo
  # end
  AllowPredicates: true

#===============
# Lint
#===============
Lint/AmbiguousAssignment:
  Enabled: true

# Operator precedence is con. ven. tion. al.
Lint/AmbiguousOperatorPrecedence:
  Enabled: false

# When this is enabled, all Rspec files generate offenses.
# We prefer the unparenthesized style.
Lint/AmbiguousBlockAssociation:
  Enabled: false

Lint/AmbiguousRange:
  Enabled: true

Lint/BinaryOperatorWithIdenticalOperands:
  Enabled: true

Lint/ConstantDefinitionInBlock:
  Enabled: true

Lint/DeprecatedConstants:
  Enabled: true

Lint/DeprecatedOpenSSLConstant:
  Enabled: true

Lint/DuplicateBranch:
  Enabled: true

Lint/DuplicateElsifCondition:
  Enabled: true

Lint/DuplicateRequire:
  Enabled: true

Lint/DuplicateRescueException:
  Enabled: true

Lint/DuplicateRegexpCharacterClassElement:
  Enabled: true

# We don't want to allow empty blocks. We don't want blocks with comments to be
# an exceptions to this rule.
Lint/EmptyBlock:
  Enabled: true
  AllowComments: false

# Sometimes it's perfectly fine to have empty classes.
# (e.g., an empty STI class, or Exception class)
Lint/EmptyClass:
  Enabled: false

Lint/EmptyConditionalBody:
  Enabled: true

Lint/EmptyFile:
  Enabled: true

Lint/EmptyInPattern:
  Enabled: true

Lint/FloatComparison:
  Enabled: true

Lint/HashCompareByIdentity:
  Enabled: true

Lint/IdentityComparison:
  Enabled: true

Lint/IncompatibleIoSelectWithFiberScheduler:
  Enabled: true

Lint/LambdaWithoutLiteralBlock:
  Enabled: true

# This issue is rare, and in the case that it comes up there's generally a very
# specific reason to generate a loop in a particular way.
Lint/Loop:
  Enabled: false

Lint/MissingSuper:
  Enabled: true

Lint/MixedRegexpCaptureTypes:
  Enabled: true

Lint/NoReturnInBeginEndBlocks:
  Enabled: true

Lint/NumberedParameterAssignment:
  Enabled: true

Lint/OutOfRangeRegexpRef:
  Enabled: true

Lint/OrAssignmentToConstant:
  Enabled: true

Lint/RaiseException:
  Enabled: true

Lint/RedundantDirGlobSort:
  Enabled: true

Lint/RedundantSafeNavigation:
  Enabled: true

Lint/RefinementImportMethods:
  Enabled: true

Lint/RequireRelativeSelfPath:
  Enabled: true

Lint/SelfAssignment:
  Enabled: true

Lint/StructNewOverride:
  Enabled: true

Lint/SuppressedException:
  Exclude:
    - spec/**/*

Lint/SymbolConversion:
  Enabled: true

Lint/ToEnumArguments:
  Enabled: true

Lint/TopLevelReturnWithArgument:
  Enabled: true

Lint/TrailingCommaInAttributeDeclaration:
  Enabled: true

Lint/TripleQuotes:
  Enabled: true

Lint/UnexpectedBlockArity:
  Enabled: true

Lint/UnmodifiedReduceAccumulator:
  Enabled: true

Lint/UnreachableLoop:
  Enabled: true

Lint/UselessMethodDefinition:
  Enabled: true

Lint/UselessRuby2Keywords:
  Enabled: true

Lint/UselessTimes:
  Enabled: true

Lint/Void:
  Exclude:
    - spec/**/*

#===============
# Metrics
#===============
Metrics/AbcSize:
  Exclude:
    - db/migrate/*

Metrics/BlockLength:
  Exclude:
    - app/views/**/*
    - config/**/*
    - spec/**/*
    - db/migrate/*

Metrics/ClassLength:
  Exclude:
    - db/migrate/*

Metrics/MethodLength:
  Exclude:
    - db/migrate/*

Metrics/ParameterLists:
  CountKeywordArgs: false

#===============
# Gemspec
#===============
Gemspec/DateAssignment:
  Enabled: true

Gemspec/DependencyVersion:
  Enabled: true

Gemspec/DeprecatedAttributeAssignment:
  Enabled: true

Gemspec/RequireMFA:
  Enabled: true

#===============
# Security
#===============
Security/CompoundHash:
  Enabled: true

Security/IoMethods:
  Enabled: true
